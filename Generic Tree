import java.util.ArrayList;
public class l003gt{
    //GENERIC TREE
    public static class Node{
        int data=0;
        ArrayList<Node> childs = new ArrayList<>();
        Node(int data){
            this.data=data;
        }
    }
    public static int size(Node node){
    int sizee=0;
    for(Node child : node.childs){//for every child node in childs arraylist
        sizee= sizee + size(child); //size is equal to size + size(child);
    }
    return sizee + 1 ; //+1 for the node's size.
    }
    public static int height(Node node){
        int h = -1;
        for(Node child : node.childs){
            h = Math.max(h,height(child));
        }
        return h+1;
    }
    public static int maximum(Node node){
        int max= -(int)1e9;
        for(Node child : node.childs){
            max= Math.max(max,maximum(child));
        }
        return Math.max(max,node.data);
    }
     public static int minimum(Node node){
        int min = node.data;
        for(Node child : node.childs){
            min= Math.min(min,minimum(child));
        }
        return min;
    }
    public static boolean find(Node node,int data){//198:10
        boolean res = node.data== data;
        for(Node child : node.childs){
            res = res || find(child,data);
        }
        return res;
    }
    public static boolean roottonodepath(Node node,int data ,ArrayList<Node> list){
        boolean res = node.data == data;
        for(Node child : node.childs){
            res = res || roottonodepath(child,data,list);//if first condition fails then second will be checked.
        }
        if(res){
            list.add(node);
        }
        return res;
    }
    
     public static ArrayList<Integer> nodeToRootPath(Node node, int data) {//faith = ki sare child apne s lekr data tk ka path ek arraylist m daalkr return krdenge
        if (node.data == data) { //agr pehla hi child hi desired data ho
          ArrayList<Integer> path = new ArrayList<>();//make a new arraylist
          path.add(node.data);//add ur self and node.data
          return path;//return it
        }
    
        for (Node child : node.childs) {//otherwise wehn the first child is not the desired data go with a loop on evry child
          ArrayList<Integer> ptc = nodeToRootPath(child, data); //ptc= Pathtillchild call the recurssion till the first child of the root node and then if arraylist is not empty so add the node.data to it and return it.
          if (ptc.size() > 0) { //if ptc size is bigger then zero means it has only the path from root to node otherwise the other childs are are unable to return a filled arraylist .They returned a empty one.
            ptc.add(node.data);//if any child gives the filled arraylist it means that arraylist contains the nodetorootpath so just add the root.data into it and return it.
            return ptc;
          }
        }
    
        return new ArrayList<>();//if data is not prsent return an empty arraylist.
      }
      public static Node lca1(Node node,int p,int q){
        ArrayList<Node> list1 = new ArrayList<>();
        ArrayList<Node> list2 = new ArrayList<>();

        roottonodepath(node,p,list1);
        roottonodepath(node,q,list2);

        int i=0, j=list1.size() - 1;//one start from start second from end
        
        Node lca=null;
        int lcadistance=0;
        while(i>=0 && j>=0 ){ // while they cross each other
            if(list1.get(i) != list2.get(j)){//if list1 at index(i) != list2 at index(j)
                break;
            }
            lcadistance++;
            lca=list1.get(i);
            i--;//both should be decreased by one.
            j--;
        }
        return lca;
    }
    public static int lca(Node node,int d1,int d2){
        ArrayList<Integer> p1 = nodeToRootPath(node,d1);
        ArrayList<Integer> p2 = nodeToRootPath(node,d2);
      
      int i =p1.size() - 1 ; 
      int j =p2.size() - 1 ;
      while(i>=0 && j>=0 && p1.get(i) == p2.get(j)){//i and j >=0 and till p1 and p2 values are same 
          i--;
          j--;
      }
      i++;//to get the last index at which both arraylists are equal
      j++;
      return p1.get(i);//return any arraylist index that will be the lca
        
    }
     public static int nodetonodepath(Node node,int p,int q){
        ArrayList<Node> list1 = new ArrayList<>();
        ArrayList<Node> list2 = new ArrayList<>();

        roottonodepath(node,p,list1);
        roottonodepath(node,q,list2);

        int i=0, j=list1.size() - 1;
        
       
        int lcadistance=0;
        while(i>=0 && j>=0 ){
            if(list1.get(i) != list2.get(j)){
                break;
            }
            lcadistance++;
            
            i--;
            j--;
        }
        int dis = (list1.size() + list2.size() - 2*(lcadistance) + 1 );
        return dis;
    }
    public static int distanceBetweenNodes(Node node, int d1, int d2){
        // write your code here
        ArrayList<Integer> p1 = nodeToRootPath(node, d1);
        ArrayList<Integer> p2 = nodeToRootPath(node, d2);
    
        int i = p1.size() - 1;
        int j = p2.size() - 1;
    
        while(i >= 0 && j >= 0 && p1.get(i) == p2.get(j)){//i , j >=0 or both shoulb be equal
          i--;//we reach to the idx of bith the list where they are not equal to each oither.
          j--;
        }
        i++;//again we have to go to the first place where the both lists are equal
        j++;
        return i+j;
      }
      public static Node gettail(Node node){ 
        Node curr = node;
        while(curr.childs.size() != 0){//still when the childs arraylist size != 0
            curr = curr.childs.get(0);//always get the first element of the arraylist as we have to reach the end of the left subtree. we acees the 0 ind bcs arraylist conatins the address of the childs and at 0 idx in arraylist the firsst child addresss is placed.
        }
        return curr;    
    }
    public static void linearise(Node node){//it will perform worst to worst in binary tree when tree has right child is a leaf node and it will perform well in when the main node has all the childs ,
        for(Node child : node.childs){
            linearise(child);
        }
        for(int i = node.childs.size() - 2 ; i >= 0 ; i--  ){//start from end of list -2 beacause we need the first child and secon 
            Node tail = gettail(node.childs.get(i));//get the tail of tree we never ever need the tail of the last child of the node bce we have have to joint its head with other child feet
            tail.childs.add(node.childs.get(i + 1));//add node.childs(i + 1 ) to tail .childs
            node.childs.remove(i + 1);//now remove node.childs(i + 1);
        }
    }
     public static Node linearize_btr(Node node){//faith first child u go and linearise urself and give the tail of ur subtree.
        if(node.childs.size() == 0){
            return node;
        }
        int n = node.childs.size();

        Node gtail = linearize_btr(node.childs.get(n - 1));//starting from last child of the node size -1 i.e last imdex of the arraylist of node

        for(int i = n - 2 ; i >= 0 ; i-- ){//for every second last child i.e size - 2 
            Node tail = linearize_btr(node.childs.get(i));//get the tail of the second last child 
            tail.childs.add(node.childs.get(i + 1 ));// tail k arraylist m means node ka n- 2 child (last 2) pr node ka n - 1 child(last 1) add krdo. 
            node.childs.remove(i + 1 );//remove the i + 1 child from node. means (n-1)
        }
        return gtail;

    }
    static int ceil=0;
    static int floor =0;

    public static void ceilandfloor(Node node,int data){
        
        if(node.data > data){
            ceil=Math.min(node.data,ceil);
        }
        if(node.data < data){
            floor = Math.max(node.data,floor);
        }
        for(Node child: node.childs){
            ceilandfloor(child,data);

        }
    }
     public static int kthlargest_(Node node, int bound){
        int maxlessthanbound =-(int)1e9;
        for(Node child :node.childs){
            int recans = kthlargest_(child,bound);
            maxlessthanbound = Math.max(maxlessthanbound, recans);
        }
        if(node.data < maxlessthanbound){
            maxlessthanbound = Math.max(maxlessthanbound,node.data);
        }
        return maxlessthanbound;
    }
    public static int kthlargest(Node node,int k){
        int bound = (int)1e9;
        while(k-- > 0){
            bound = kthlargest_(node, bound);
        }
    }
    public static void display(Node node){
        System.out.println(node.data + "->");
        for(Node child :node.childs){
            System.out.println(node.data + ", ");
        }
        System.out.println();

        for(Node child : node.childs){
            display(child);
        }
    }
    
    
    
    
    
    
    
}
