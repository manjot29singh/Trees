import java.util.ArrayList;
// trees ki 1 class : 2nd March

public class l001bt{
    public static class Node{
        int data = 0;
        Node left = null;
        Node right = null;

        Node(int data){
            this.data = data;

        }
    }
    //TRaversals
    public static void preOrderTraversel(Node root, ArrayList<Integer> ans){
        if(root == null){
            return;
        }
        ans.add(root.data);
        preOrderTraversel(root.left,ans);
        preOrderTraversel(root.right,ans);
    }
    public static void InOrderTraversel(Node root, ArrayList<Integer> ans){
        if(root == null){
            return;
        }
        InOrderTraversel(root.left,ans);
        ans.add(root.data);
        InOrderTraversel(root.right,ans);
    }
    public static void PostOrderTraversel(Node root, ArrayList<Integer> ans){
        if(root == null){
            return;
        }
        PostOrderTraversel(root.left,ans);
        PostOrderTraversel(root.right,ans);
        ans.add(root.data);
    }
    public static void Traversal(Node root){
        ArrayList<Integer> ans = new ArrayList<>();
        preOrderTraversel(root, ans);
        InOrderTraversel(root, ans);
        PostOrderTraversel(root, ans);
    }
    // Basic Functions
    public static int size(Node root){
        if(root==null){
            return 0;
        }
        int left =size(root.left);
        int right =size(root.right);
        return left + right + 1;
    }
    public static int height(Node root){//in terms of edge (arrows)--------->
        if(root==null){
            return -1;
        }
        int left = height(root.left);
        int right = height(root.right);
        return Math.max(left,right) + 1;
    }
    
    public static int heightintermsofNode(Node root){
        if(root==null){
            return 0;
        }
        int left =  heightintermsofNode(root.left);
        int right =  heightintermsofNode(root.right);
        return Math.max(left, right)+1;
    }
    public static int max(Node root){
        if(root==null){
            return -(int)1e9;   
        }
        int leftmax = max(root.left);
        int rightmax = max(root.right);
        return Math.max(Math.max(leftmax,rightmax),root.data);
    }
    public static int min(Node root){
        if(root==null){
            return (int)1e9;   
        }
        int leftmin = min(root.left);
        int rightmin = min(root.right);
        return Math.min(Math.min(leftmin,rightmin),root.data);
    }
    public static int sum(Node root){
        if(root == null){
            return 0;
        } 
        int  leftsum = sum(root.left);
        int rightsum = sum(root.right);
        return rightsum + leftsum + root.data;
    }

    public static boolean findData1(Node root , int data){//reccursion
        if(root == null){
            return false;
        }
        //boolean res = root.data == data;
        return root.data == data || findData1(root.left,data) || findData1(root.right,data);
    }

    public static boolean findData2(Node root , int data){
        if(root == null){
            return false;
        }
        if(root.data==data){
            return true;
        }
        boolean left = findData2(root.left,data);
        if(left)
            return true;
        
        boolean right = findData2(root.right, data);
        if(right)
            return true;
        return false;
    }
    public static boolean roottoNodepath(Node root , int data , ArrayList<Node> ans){
        if(root==null){
            return false; 
        }

        boolean res = (root.data==data) || roottoNodepath(root.left,data,ans) || roottoNodepath(root.right,data,ans);
        if (res)
            ans.add(root);
        return res;
    }
    
    public static void printatDepthk(Node root,Node block,int k,ArrayList<Integer> ans){//96:37:00 we have to go down k level in tree 
        if(root==null || root==block || k<0) return;//k should be positive beacuse -k will reach to 1 level more down to the desired one 
        if(k==0){                             //finding the k==0 means we reached the desired level of tree now we should print the nodes
            ans.add(root.data);
            return;
        }
        printatDepthk(root.left,block,k-1,ans);//k should be decreasing by 1 on next decreased level
        
        printatDepthk(root.right,block,k-1,ans);

    }
    public static ArrayList<Integer> distancek(Node root,Node target,int k ){
        ArrayList<Node> path = new ArrayList<>();
        roottoNodepath(root,target.data,path);
        
        Node block=null;

        ArrayList<Integer> ans = new ArrayList<>();

        for(int i=0 ; i < path.size() ; i++){  
            printatDepthk(path.get(i),block,k-i,ans);
            block = path.get(i);
        }
        return ans;
    }
    static ArrayList<Integer> path = new ArrayList<>();
    public static boolean findData_nodetorootpath(Node node,int data){
        if(node==null){
            return false;
        }
        if(node.data==data){
            path.add(node.data);
            return true;
        }
        boolean left = findData_nodetorootpath(node.left,data);
        if(left){
            path.add(node.data);
            return true;
        }
        boolean right = findData_nodetorootpath(node.right,data);
        if(right){
            path.add(node.data);

            return true;
        }
        return false;   
    }
    public static void printKNodesFar(Node node, int data, int k) {//print all the nodes from node to k levell down 
        // write your code here
        path = new ArrayList<>();
        findData_nodetorootpath(node,data);
        for(int i=0;i<path.size();i++){
            printatDepthk(path.get(i),i==0 ? null : path.get(i - 1),);
        }
    }
    public static void printsinglechildnode(Node node,Node parent){
        if(node==null){      //tree is empty
            return;
        }
        if(parent != null &&  (parent.left == null || parent.right==null)){ //parent should not be null bcs if parent== null then there will be no child . && condition to check if that node is only child or not ?? so check either nod.left or node.right == null
            System.out.println(node.data);//print the node data
        }
        printsinglechildnode(node.left,node);
        printsinglechildnode(node.right,node);
    }
    
    public static Node removeleavenodes(Node node){// return type.
        if(node==null){
            return null;
        }
        if(node.left==null && node.right==null){//if we found the leaf node means the node which have no left or right child then to remove it just return a null value to its [parent.]
            return null;
        }
        node.left=removeleavenodes(node.left);
        node.right=removeleavenodes(node.right);
        return node;
    }
    public static void removeleaves(Node node, Node parent){//void type 
        if(node==null){
            return;
        }
        if(node.left==null && node.right==null){//its a leaf node chek
            
            if(parent.left==node){  //means leaf node is connected to the left side of parent 
                parent.left=null;   //so make parent.left=null;
            }
            else{                   //means leaf node is the right child of parent
                parent.right=null;
            }
        }
        removeleaves(node.left,node);
        removeleaves(node.right,node);
    }
    public static Node removeleaves1(Node node){//if there is only single node its the leaf and it is the parent too
        if(node.left==null && node.right==null){
            return null;
        }
        removeleaves(node,null);
    }
    public static boolean IsBST(Node node){
        if(node==null) return true;
        boolean leftres = IsBST(node.left);
        if(!leftres) return false; 

        //INOREDER CHECKING
        if(prev != null  &&  prev.data > node.data ) return false; //main condition previous.data should be less  node.data

        prev=node;//if the above if do not runs then update the prev to point at node.

        boolean rightres = IsBST(node.right);
        if(!rightres) return false;

        return true;
    }
    public class IsBSTpairsol{// main class we made to return many and many values to function
        int maxEle = -(int)1e8;
        int minEle = (int)1e8;
        boolean IsBST = true;

        int height = -1;
        boolean isBal = true;

        int largestBSTSize = 0;
        Node largestBSTNode =null;

        int totalNoOfBST = 0;

        public IsBSTpairsol(int maxEle, int minEle,boolean IsBST){//parametrized CONSTRUCTOR
            this.IsBST = IsBST;
            this.maxEle = maxEle;
            this.minEle = minEle;
        }
        public IsBSTpairsol(){//Default CONSTRUCTOR
        }
        public IsBSTpairsol isbst(Node node){//Return type sol.
        if(node==null){
            IsBSTpairsol base = new IsBSTpairsol();//when we reach null that is bst and its true so we return a new base type of IsBSTpairsol.
            
            return base;
        }

        IsBSTpairsol left = isbst(node.left);//left call
        IsBSTpairsol right = isbst(node.right);//right call.

        IsBSTpairsol myres = new IsBSTpairsol(); //making new myres to return.
        
        myres.IsBST=false; //default set it to false

        if(left.IsBST && right.IsBST && left.maxEle < node.data && node.data < right.minEle){//condn for BST
            myres.IsBST = true;
            myres.minEle = Math.min(left.minEle,node.data);//we have to compare between node->data or left->minEle beacuse while returning it will return the -1e9 or +1e9 in place of minEle and maxEle respectively/
            myres.maxEle = Math.max(right.maxEle,node.data);//Because right ele in BSt is alwys the max.
        }
        return myres;
    }
    
    public static class isBalpair{
        int height= -1;
        boolean balancetree = true;

        int totalnoofbst =0;
    }
    public static isBalpair isbalance(Node node){
        if(node==null)
            return new isBalpair();
        
        isBalpair left = isbalance(node.left);
        if(!left.balancetree) return left;
        

        isBalpair right = isbalance(node.right);
        if(!right.balancetree) return right;
    
        isBalpair ans = new isBalpair();
        ans.balancetree = false;

        if(left.balancetree && right.balancetree && Math.abs(left.height  - right.height ) <= 1){
            ans.height = Math.max(left.height, right.height) + 1;
            ans.balancetree = true;
        }
        return ans;
    }
    public static boolean isbal(Node node){
        isBalpair ans = isbalance(node);
        return ans.balancetree;
    }

    public static int totalbst(Node node){
        
        if(node==null) return 0;

        isBalpair ans = new isBalpair();

        int left = totalbst(node.left);

        if(node.left.data < node.data && node.data < node.right.data && ans.IsBST ){
       
        }
        int right = totalbst(node.right);   
    }

    }

    
    
    
    
    
    
    
    }
