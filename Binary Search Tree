import java.util.ArrayList;
//9 MARCH BST
public class bst {

    public static class Node{

        int data=0;
        Node left = null;
        Node right = null;
        
        Node(int data){
            this.data = data;
        }
    }
    public static Node constructTree(int[] arr,int si,int ei){
        if(si > ei){
            return null;
        }
        int mid = (si + ei) / 2;
        Node node = new Node(arr[mid]) ;

        node.left = constructTree(arr,si,mid-1);
        node.right = constructTree(arr,mid+1,ei);
        return node;
    }
    public static Node constructTree(int[] arr){
        return constructTree(arr,0,arr.length-1);
    }
    public static int size(Node node){
        return (node==null ) ? 0 : size(node.left)+size(node.right)+1;       
    }
    public static int height(Node node){
        if(node==null){
            return -1;
        }
        int left = height(node.left);
        int right = height(node.right);
        return Math.max(left,right)+1;
    }
    public static int max(Node node){
        Node curr = node;
        while(curr.right != null){
            curr=curr.right;
        }
        return curr.data;   
    }
    public static int maximumRec(Node node) {//Recursive
        if (node.right == null)
            return node.data;
        return maximumRec(node.right);
    }
    public static int min(Node node){
        Node curr = node;
        while(curr.left != null){
            curr=curr.left;
        }
        return curr.data;
    }
    public static boolean find(Node node,int data){
        Node curr = node;
        while(curr!=null){
            if(curr.data==data){
                return true;
            }else if(curr.data < data){
                curr=curr.right; 
            }
            else{
                curr=curr.left;
            }
        }
        return false;
    }
     public static Node addNode(Node node,int data){//Recursive    O(n)
        if(node==null){      //when we reach the position then there attach the new node with data;
            return new Node(data);
        }
        if(data > node.data){
            node.right = addNode(node.right,data);
        }
        else if(data < node.data){
            node.left = addNode(node.left,data);    
        }
        return node;

    } 
     public static Node addData_Iterative(Node node, int data)
    {
         if(node == null)
            return new Node(data);//if the tree is null or we reach the position where we have to attach the node.
    
            Node curr = node;
            Node dNode = new Node(data);//node we want to aatch.
            while(true)
            {
                if (curr.data == data)//dont add node if curr.data==data
                    break; 
                else if(curr.data < data){//curr.data is smaller move to right.
                    if(curr.right != null)//check if right exists if right is not null it means it exists
                        curr = curr.right;//shift curr = curr.right;
                    else{                 //if curr.right is null
                        curr.right = dNode;//attach the datanode to curr.right
                        break;
                    }
                }else                      //curr.data > data
                {
                    if(curr.left != null)
                        curr = curr.left;
                    else{
                        curr.left = dNode;
                        break;
                        }
                }
            }
            return node;
    }
     public static Node lca(Node node ,int p,int q){   //O(n) 03:34:26
        Node curr = node;
        while(curr != null){    // still curr is not null
            if(curr.data < p && curr.data < q){ //if curr.data is lesser than p and q
                curr=curr.right; //move to curr.right
            }
            else if(curr.data > p && curr.data > q){  //if curr.data is bigger then p and q
                curr=curr.left;  //move to curr.left
            }
            else{ //when u cant decide where u have to go that means that is the lca
                //now we have to chevk that if both the data is present or not in the tree 
                return find(curr,p) && find(curr,q) ? curr : null;//IMPORTANT  // if both the data is presnt in the tree then the lca is curr otherwise the lca will be null.
            }
        }
        return null;
    }
     public static int lcarec(Node node, int d1, int d2) {//Recursive
        // write your code here
        Node curr=node;
        if(curr.data < d1 && curr.data < d2){
           return lcarec(node.right,d1,d2);
        }
        else if(curr.data > d1 && curr.data > d2){
            return lcarec(node.left,d1,d2);
        }
        else{
            return find(curr,d1)&&find(curr,d2) ? curr.data : 0;
        }
    }
    public static Node removenode(Node node,int data){
        if(node==null){ // if tree is null
            return null;
        }
        if(node.data < data){          //if node.data os less then desired data 
            node.right=removenode(node.right,data); //move to right
        }
        else if (node.data > data){    //if node.data is greater than desired data
            node.left=removenode(node.left,data);//move to left
        }
        else{                          //if node.data = desired data.
            if(node.left==null || node.right==null){ //check if node.left == null or node.right == null
                return node.left != null ? node.left : node.right;//we have to return the not null node to attach it to the main node
            }//if left is not null return left otherwise return node.right.

            int mindata = min(node.right);//calculating min data from right subtree.
            node.data = mindata;          // assigning the mindata = node.data.
            node.right = removenode(node.right, mindata);//again call the removenode at that place (from whwere we have replaced the data )
        }
        return node;
    }
    public static void inorder(Node node,ArrayList<Integer> list){//O(n)
        //we will have the inorder of the tree and gonna put 2 pointer one from first second at last of list ans then we will traverse the list to make our target
        if(node==null){
            return;
        }
        inorder(node.left, list);//inorder of the tree which is stored in the arraylsit named list.
        list.add(node.data);
        inorder(node.right, list);
    }
    
    
}
    
    
    

