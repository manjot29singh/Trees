import java.util.ArrayList;
//9 MARCH BST
public class bst {

    public static class Node{

        int data=0;
        Node left = null;
        Node right = null;
        
        Node(int data){
            this.data = data;
        }
    }
    public static Node constructTree(int[] arr,int si,int ei){
        if(si > ei){
            return null;
        }
        int mid = (si + ei) / 2;
        Node node = new Node(arr[mid]) ;

        node.left = constructTree(arr,si,mid-1);
        node.right = constructTree(arr,mid+1,ei);
        return node;
    }
    public static Node constructTree(int[] arr){
        return constructTree(arr,0,arr.length-1);
    }
    public static int size(Node node){
        return (node==null ) ? 0 : size(node.left)+size(node.right)+1;       
    }
    public static int height(Node node){
        if(node==null){
            return -1;
        }
        int left = height(node.left);
        int right = height(node.right);
        return Math.max(left,right)+1;
    }
    public static int max(Node node){
        Node curr = node;
        while(curr.right != null){
            curr=curr.right;
        }
        return curr.data;   
    }
    public static int maximumRec(Node node) {//Recursive
        if (node.right == null)
            return node.data;
        return maximumRec(node.right);
    }
    public static int min(Node node){
        Node curr = node;
        while(curr.left != null){
            curr=curr.left;
        }
        return curr.data;
    }
    public static boolean find(Node node,int data){
        Node curr = node;
        while(curr!=null){
            if(curr.data==data){
                return true;
            }else if(curr.data < data){
                curr=curr.right; 
            }
            else{
                curr=curr.left;
            }
        }
        return false;
    }
    
    
}
    
    
    

